{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { List, Button } from \"semantic-ui-react\";\nimport './question.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  _s();\n\n  const QUESTION_API = gql`\n  {\n    questions {\n      id\n      description\n      answer {\n        id\n        option\n        isCorrect\n      }\n    }\n  }\n`;\n  const {\n    loading,\n    data: {\n      questions: Quest\n    } = {}\n  } = useQuery(QUESTION_API);\n\n  if (Quest) {\n    console.log(Quest);\n  }\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const checkAnswer = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 100);\n      console.log(score);\n    } else {\n      console.log(\"Wrong Answer\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      bulleted: true,\n      children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Fetching data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : Quest && Quest.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [post.description, /*#__PURE__*/_jsxDEV(List.List, {\n            children: post.answer.map(answers => {\n              return /*#__PURE__*/_jsxDEV(Button, {\n                className: \"answerButton\",\n                value: answers.id,\n                onClick: () => checkAnswer(answers.isCorrect),\n                content: answers.option\n              }, answers.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"twcvupZxwhcyPxosxU2PU27Jtm8=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useRef","useContext","useQuery","gql","List","Button","Question","QUESTION_API","loading","data","questions","Quest","console","log","currentQuestion","setCurrentQuestion","score","setScore","checkAnswer","isCorrect","map","post","description","answer","answers","id","option"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AAEA,OAAO,gBAAP;;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAElB,QAAMC,YAAY,GAAGJ,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZE;AAcA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,SAAS,EAAEC;AAAb,QAAuB;AAAxC,MAA+CT,QAAQ,CAACK,YAAD,CAA7D;;AAEA,MAAGI,KAAH,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;;AAED,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMoB,WAAW,GAAIC,SAAD,IAAe;AACjC,QAAGA,SAAH,EAAc;AACZF,MAAAA,QAAQ,CAACD,KAAK,GAAG,GAAT,CAAR;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD,KAHD,MAGO;AACLJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;AACF,GAPD;;AASA,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,QAAQ,MAAd;AAAA,gBACGL,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADM,GAGNG,KAAK,IACLA,KAAK,CAACS,GAAN,CAAWC,IAAD,iBACR;AAAA,+BACA,QAAC,IAAD,CAAM,IAAN;AAAA,qBACGA,IAAI,CAACC,WADR,eAEE,QAAC,IAAD,CAAM,IAAN;AAAA,sBACGD,IAAI,CAACE,MAAL,CAAYH,GAAZ,CAAiBI,OAAD,IAAa;AAC5B,kCACE,QAAC,MAAD;AAAQ,gBAAA,SAAS,EAAC,cAAlB;AACA,gBAAA,KAAK,EAAEA,OAAO,CAACC,EADf;AAEA,gBAAA,OAAO,EAAE,MAAMP,WAAW,CAACM,OAAO,CAACL,SAAT,CAF1B;AAGA,gBAAA,OAAO,EAAEK,OAAO,CAACE;AAHjB,iBAIKF,OAAO,CAACC,EAJb;AAAA;AAAA;AAAA;AAAA,sBADF;AAQD,aATA;AADH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAAgBJ,IAAI,CAACI,EAArB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADF;AALJ;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA8BD;;GAhEQnB,Q;UAgB8CJ,Q;;;KAhB9CI,Q;AAkET,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { List, Button } from \"semantic-ui-react\";\r\n\r\nimport './question.css';\r\n\r\nfunction Question() {\r\n\r\n  const QUESTION_API = gql`\r\n  {\r\n    questions {\r\n      id\r\n      description\r\n      answer {\r\n        id\r\n        option\r\n        isCorrect\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n  const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n\r\n  if(Quest) {\r\n    console.log(Quest);\r\n  }\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  \r\n  const checkAnswer = (isCorrect) => {\r\n    if(isCorrect) {\r\n      setScore(score + 100);\r\n      console.log(score);\r\n    } else {\r\n      console.log(\"Wrong Answer\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <List bulleted>\r\n        {loading ? (\r\n          <h1>Fetching data...</h1>\r\n        ) : (\r\n          Quest &&\r\n          Quest.map((post) => (\r\n            <div>\r\n            <List.Item key={post.id}>\r\n              {post.description}\r\n              <List.List>\r\n                {post.answer.map((answers) => {\r\n                  return (\r\n                    <Button className=\"answerButton\" \r\n                    value={answers.id} \r\n                    onClick={() => checkAnswer(answers.isCorrect)}\r\n                    content={answers.option} \r\n                    key={answers.id} \r\n                    />\r\n                  );\r\n                })}\r\n              </List.List>\r\n            </List.Item>\r\n            </div>\r\n          ))\r\n        )}\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}