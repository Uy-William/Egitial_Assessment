{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { List, Button } from \"semantic-ui-react\";\nimport \"./question.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  _s();\n\n  const QUESTION_API = gql`\n    {\n      questions {\n        id\n        description\n        answer {\n          id\n          option\n          isCorrect\n        }\n      }\n    }\n  `; // Run and fetch the data on the query\n\n  const {\n    loading,\n    data: {\n      questions: Quest\n    } = {}\n  } = useQuery(QUESTION_API);\n\n  if (Quest) {\n    console.log(Quest);\n  }\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showAnswer, setshowAnswer] = useState(false);\n  const [answerCorrect, setAnswerCorrect] = useState('');\n  const [seconds, setSeconds] = useState(15);\n  useEffect(() => {\n    let time = setInterval(() => {\n      setSeconds(seconds - 1);\n    }, 1000);\n  });\n\n  const checkAnswer = isCorrect => {\n    if (isCorrect) {\n      setAnswerCorrect('Right!');\n      setScore(score + 100);\n      console.log(score);\n    } else {\n      setAnswerCorrect('Wrong!');\n      console.log(\"Wrong Answer\");\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < Quest.length) {\n      setCurrentQuestion(nextQuestion);\n      setshowAnswer(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      bulleted: true,\n      children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Fetching data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [currentQuestion + 1, \" / \", Quest.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), seconds, showAnswer ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: answerCorrect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [Quest[currentQuestion].description, /*#__PURE__*/_jsxDEV(List.List, {\n            children: Quest[currentQuestion].answer.map(answers => {\n              return /*#__PURE__*/_jsxDEV(Button, {\n                className: \"answerButton\",\n                value: answers.id,\n                onClick: () => checkAnswer(answers.isCorrect),\n                content: answers.option\n              }, answers.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 25\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, Quest.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this) //loading\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"ibpBp4VkDf7ScKg06aMiJZIiq3w=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useRef","useContext","useQuery","gql","List","Button","Question","QUESTION_API","loading","data","questions","Quest","console","log","currentQuestion","setCurrentQuestion","score","setScore","showAnswer","setshowAnswer","answerCorrect","setAnswerCorrect","seconds","setSeconds","time","setInterval","checkAnswer","isCorrect","nextQuestion","length","description","answer","map","answers","id","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { List, Button } from \"semantic-ui-react\";\r\n\r\nimport \"./question.css\";\r\n\r\nfunction Question() {\r\n  const QUESTION_API = gql`\r\n    {\r\n      questions {\r\n        id\r\n        description\r\n        answer {\r\n          id\r\n          option\r\n          isCorrect\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  // Run and fetch the data on the query\r\n  const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n\r\n  if (Quest) {\r\n    console.log(Quest);\r\n  }\r\n\r\n\r\n \r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showAnswer, setshowAnswer] = useState(false);\r\n  const [answerCorrect, setAnswerCorrect] = useState('');\r\n\r\n\r\n  const [seconds, setSeconds ] = useState(15);\r\n    useEffect(() => {\r\n     let time = setInterval(() => {\r\n        setSeconds(seconds - 1);\r\n      }, 1000)\r\n    })\r\n\r\n  const checkAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setAnswerCorrect('Right!');\r\n      setScore(score + 100);\r\n      console.log(score);\r\n    } else {\r\n      setAnswerCorrect('Wrong!');\r\n      console.log(\"Wrong Answer\");\r\n    }\r\n    const nextQuestion = currentQuestion + 1;\r\n    if(nextQuestion < Quest.length) {\r\n      setCurrentQuestion(nextQuestion);\r\n      setshowAnswer(true);\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <>\r\n      <List bulleted>\r\n        {loading ? (\r\n          <h1>Fetching data...</h1>\r\n        ) : (\r\n          <div>\r\n            <h1>{currentQuestion + 1} / {Quest.length}</h1>\r\n            {seconds}\r\n            { showAnswer ? (\r\n              <h4>{answerCorrect}</h4>\r\n            ) : (\r\n              <h4></h4>\r\n            )}\r\n            <List.Item key={Quest.id}>\r\n              {Quest[currentQuestion].description}\r\n              <List.List>\r\n                    {Quest[currentQuestion].answer.map((answers) => {\r\n                      return (\r\n                        <Button\r\n                          className=\"answerButton\"\r\n                          value={answers.id}\r\n                          onClick={() => checkAnswer(answers.isCorrect)}\r\n                          content={answers.option}\r\n                          key={answers.id}\r\n                        />\r\n                      );\r\n                    })\r\n                  }\r\n              </List.List>\r\n            </List.Item>\r\n          </div>\r\n          //loading\r\n        )}\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}