{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Card, List } from \"semantic-ui-react\";\nimport './question.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QUESTION_API = gql`\n  {\n    questions {\n      id\n      description\n      answer {\n        id\n        option\n        isCorrect\n      }\n    }\n  }\n`;\n\nfunction Question() {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(QUESTION_API);\n  const count = data.questions.length;\n  console.log(count);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      bulleted: true,\n      children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Fetching data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Got Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) // Quest &&\n      // Quest.map((post) => (\n      //   <List.Item key={post.id}>\n      //     {post.description}\n      //     <List.List>\n      //       {post.answer.map((answers) => {\n      //         return (\n      //           <a href={answers.id}>\n      //               <List.Item className=\"List-Item\" key={answers.id}>\n      //             {answers.option} + {answers.points}\n      //           </List.Item>\n      //           </a>\n      //         );\n      //       })}\n      //     </List.List>\n      //   </List.Item>\n      // ))\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"HasvTXHwlBNedvPpf4Gl00Z2xbw=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useRef","useContext","useQuery","gql","Card","List","QUESTION_API","Question","loading","data","count","questions","length","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AAEA,OAAO,gBAAP;;;AAEA,MAAMC,YAAY,GAAGH,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAcA,SAASI,QAAT,GAAoB;AAAA;;AAElB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBP,QAAQ,CAACI,YAAD,CAAlC;AACA,QAAMI,KAAK,GAAID,IAAI,CAACE,SAAL,CAAeC,MAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,sBACE;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,QAAQ,MAAd;AAAA,gBACGF,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADM,gBAIN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJM,CAKN;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvBJ;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA8BD;;GAnCQD,Q;UAEmBL,Q;;;KAFnBK,Q;AAqCT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { Card, List } from \"semantic-ui-react\";\r\n\r\nimport './question.css';\r\n\r\nconst QUESTION_API = gql`\r\n  {\r\n    questions {\r\n      id\r\n      description\r\n      answer {\r\n        id\r\n        option\r\n        isCorrect\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Question() {\r\n\r\n  const { loading, data } = useQuery(QUESTION_API);\r\n  const count = (data.questions.length);\r\n  console.log(count);\r\n  return (\r\n    <>\r\n      <List bulleted>\r\n        {loading ? (\r\n          <h1>Fetching data...</h1>\r\n        ) : (\r\n\r\n          <h1>Got Data</h1>\r\n          // Quest &&\r\n          // Quest.map((post) => (\r\n          //   <List.Item key={post.id}>\r\n          //     {post.description}\r\n          //     <List.List>\r\n          //       {post.answer.map((answers) => {\r\n          //         return (\r\n                      \r\n          //           <a href={answers.id}>\r\n          //               <List.Item className=\"List-Item\" key={answers.id}>\r\n          //             {answers.option} + {answers.points}\r\n          //           </List.Item>\r\n          //           </a>\r\n          //         );\r\n          //       })}\r\n          //     </List.List>\r\n          //   </List.Item>\r\n          // ))\r\n        )}\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}