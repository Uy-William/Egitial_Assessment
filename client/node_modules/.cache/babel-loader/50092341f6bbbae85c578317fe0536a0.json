{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\"; // import { List, Button, Card, Icon } from \"semantic-ui-react\";\n\nimport { Box, Grid, styled, Paper, Button } from \"@mui/material\";\nimport \"./question.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Item = styled(Paper)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    backgroundColor: theme.palette.mode === \"dark\" ? \"#1A2027\" : \"#fff\",\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  };\n});\n\nfunction Question() {\n  _s();\n\n  const QUESTION_API = gql`\n    {\n      questions {\n        id\n        description\n        answer {\n          id\n          option\n          isCorrect\n        }\n      }\n    }\n  `; // Run and fetch the data on the query\n\n  const {\n    loading,\n    data: {\n      questions: Quest\n    } = {}\n  } = useQuery(QUESTION_API);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showAnswer, setshowAnswer] = useState(false);\n  const [final, setFinal] = useState(true);\n  const [answerCorrect, setAnswerCorrect] = useState(null);\n  const [seconds, setSeconds] = useState(3);\n  useEffect(() => {\n    const time = setInterval(() => {\n      setSeconds(seconds => seconds - 1);\n\n      if (seconds === 0 && seconds !== -1) {\n        console.log(\"Times Up!\");\n\n        if (currentQuestion !== 4) {\n          clearInterval(time);\n          setCurrentQuestion(currentQuestion => currentQuestion + 1);\n          setSeconds(3);\n          console.log(currentQuestion);\n        } else {\n          window.clearInterval(time);\n        }\n      }\n    }, 1000);\n  }, [seconds, currentQuestion]);\n\n  const checkAnswer = isCorrect => {\n    if (isCorrect) {\n      setAnswerCorrect(true);\n      setScore(score + 100);\n    } else {\n      setAnswerCorrect(false);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < Quest.length) {\n      setSeconds(15);\n      setCurrentQuestion(nextQuestion);\n      setshowAnswer(true);\n    } else {\n      console.log(score);\n      setFinal(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"fetching data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      className: \"bg\",\n      maxWidth: \"60%\",\n      marginLeft: \"20%\",\n      marginTop: \"15%\",\n      minHeight: \"50vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      children: [\"00:\", seconds, showAnswer ? /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: answerCorrect ? {\n          color: 'green'\n        } : {\n          color: 'red'\n        },\n        children: answerCorrect ? \"Correct!\" : \"Wrong!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [currentQuestion + 1, \" / \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: Quest.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: Quest[currentQuestion].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        rowSpacing: 1,\n        columnSpacing: {\n          xs: 1,\n          sm: 6,\n          md: 3\n        },\n        children: Quest[currentQuestion].answer.map(answers => {\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              className: \"answerButton\",\n              value: answers.id,\n              onClick: () => checkAnswer(answers.isCorrect),\n              maxWidth: \"100%\",\n              children: answers.option\n            }, answers.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"YI5y+cQ3CgHxvfZWSYoK6hWE2Es=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useRef","useContext","useQuery","gql","Box","Grid","styled","Paper","Button","Item","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","textAlign","color","text","secondary","Question","QUESTION_API","loading","data","questions","Quest","currentQuestion","setCurrentQuestion","score","setScore","showAnswer","setshowAnswer","final","setFinal","answerCorrect","setAnswerCorrect","seconds","setSeconds","time","setInterval","console","log","clearInterval","window","checkAnswer","isCorrect","nextQuestion","length","description","xs","sm","md","answer","map","answers","id","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\n// import { List, Button, Card, Icon } from \"semantic-ui-react\";\r\nimport { Box, Grid, styled, Paper, Button } from \"@mui/material\";\r\n\r\nimport \"./question.css\";\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n  backgroundColor: theme.palette.mode === \"dark\" ? \"#1A2027\" : \"#fff\",\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(1),\r\n  textAlign: \"center\",\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nfunction Question() {\r\n  const QUESTION_API = gql`\r\n    {\r\n      questions {\r\n        id\r\n        description\r\n        answer {\r\n          id\r\n          option\r\n          isCorrect\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  // Run and fetch the data on the query\r\n  const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showAnswer, setshowAnswer] = useState(false);\r\n  const [final, setFinal] = useState(true);\r\n  const [answerCorrect, setAnswerCorrect] = useState(null);\r\n\r\n  const [seconds, setSeconds] = useState(3);\r\n  useEffect(() => {\r\n    const time = setInterval(() => {\r\n      setSeconds(seconds => seconds - 1);\r\n      if (seconds === 0 && seconds !== -1) {\r\n        console.log(\"Times Up!\");\r\n        if (currentQuestion !== 4) {\r\n          clearInterval(time)\r\n          setCurrentQuestion(currentQuestion => currentQuestion + 1);\r\n          setSeconds(3);\r\n          console.log(currentQuestion);\r\n        } else {\r\n          window.clearInterval(time);\r\n        }\r\n      }\r\n    }, 1000);\r\n  }, [seconds, currentQuestion]);\r\n\r\n  const checkAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setAnswerCorrect(true);\r\n      setScore(score + 100);\r\n    } else {\r\n      setAnswerCorrect(false);\r\n    }\r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < Quest.length) {\r\n      setSeconds(15);\r\n      setCurrentQuestion(nextQuestion);\r\n      setshowAnswer(true);\r\n    } else {\r\n      console.log(score);\r\n      setFinal(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <h2>fetching data!</h2>\r\n      ) : (\r\n        <Box\r\n        className={\"bg\"}\r\n          maxWidth={\"60%\"}\r\n          marginLeft={\"20%\"}\r\n          marginTop={\"15%\"}\r\n          minHeight={\"50vh\"}\r\n          display={\"flex\"}\r\n          flexDirection={\"column\"}\r\n          justifyContent={\"center\"}\r\n        >\r\n          00:{seconds}\r\n          {showAnswer ? <h4 style={answerCorrect ? {color: 'green'} : {color: 'red'}}>{answerCorrect ? \"Correct!\" : \"Wrong!\"}</h4> : <></>}\r\n          <h2>{currentQuestion + 1} / <b>{Quest.length}</b></h2>\r\n          <h1>{Quest[currentQuestion].description}</h1>\r\n          <Grid\r\n            container\r\n            rowSpacing={1}\r\n            columnSpacing={{ xs: 1, sm: 6, md: 3 }}\r\n          >\r\n            {Quest[currentQuestion].answer.map((answers) => {\r\n              return (\r\n                <Grid item xs={6}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className=\"answerButton\"\r\n                    value={answers.id}\r\n                    onClick={() => checkAnswer(answers.isCorrect)}\r\n                    key={answers.id}\r\n                    maxWidth={\"100%\"}\r\n                  >\r\n                    {answers.option}\r\n                  </Button>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}