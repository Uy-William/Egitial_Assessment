{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\"; // import { List, Button, Card, Icon } from \"semantic-ui-react\";\n\nimport { Box, Grid, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from \"@mui/material/\";\nimport \"./question.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  _s();\n\n  const QUESTION_API = gql`\n    {\n      questions {\n        id\n        description\n        answer {\n          id\n          option\n          isCorrect\n        }\n      }\n    }\n  `; // Run and fetch the data on the query\n\n  const {\n    loading,\n    data: {\n      questions: Quest\n    } = {}\n  } = useQuery(QUESTION_API);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showAnswer, setshowAnswer] = useState(false);\n  const [final, setFinal] = useState(true);\n  const [answerCorrect, setAnswerCorrect] = useState(null);\n  const [seconds, setSeconds] = useState(15);\n  const [isRunning, setisRunning] = useState(true);\n  useEffect(() => {\n    if (isRunning) {\n      const time = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n        console.log(currentQuestion);\n\n        if (seconds === 0 && seconds >= -1) {\n          console.log(\"Times Up!\");\n\n          if (currentQuestion >= 4) {\n            setFinal(true);\n            setisRunning(false);\n            clearInterval(time);\n          } else {\n            setCurrentQuestion(currentQuestion => currentQuestion + 1);\n            setSeconds(15);\n          }\n        }\n      }, 1000);\n      return () => window.clearInterval(time);\n    }\n  });\n\n  const modalOff = () => {\n    setFinal(false);\n  };\n\n  const checkAnswer = isCorrect => {\n    if (isCorrect) {\n      setAnswerCorrect(true);\n      setScore(score + 100);\n    } else {\n      setAnswerCorrect(false);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < Quest.length) {\n      setSeconds(15);\n      setCurrentQuestion(nextQuestion);\n      setshowAnswer(true);\n    } else {\n      console.log(score);\n      setFinal(true);\n      setisRunning(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"fetching data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      className: \"bg\",\n      maxWidth: \"60%\",\n      marginLeft: \"20%\",\n      marginTop: \"15%\",\n      minHeight: \"50vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      children: final ? /*#__PURE__*/_jsxDEV(Dialog, {\n        open: final,\n        onClose: modalOff,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Congratulations!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [seconds, showAnswer ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: answerCorrect ? {\n            color: 'green'\n          } : {\n            color: 'red'\n          },\n          children: answerCorrect ? \"Correct!\" : \"Wrong!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [currentQuestion + 1, \" / \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: Quest.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: Quest[currentQuestion].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          rowSpacing: 1,\n          columnSpacing: {\n            xs: 1,\n            sm: 6,\n            md: 3\n          },\n          children: Quest[currentQuestion].answer.map(answers => {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                className: \"answerButton\",\n                value: answers.id,\n                onClick: () => checkAnswer(answers.isCorrect),\n                maxWidth: \"100%\",\n                children: answers.option\n              }, answers.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"yLvqvivT9PYCf9FKQHtYz+1EX1M=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useQuery","gql","Box","Grid","Button","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Question","QUESTION_API","loading","data","questions","Quest","currentQuestion","setCurrentQuestion","score","setScore","showAnswer","setshowAnswer","final","setFinal","answerCorrect","setAnswerCorrect","seconds","setSeconds","isRunning","setisRunning","time","setInterval","console","log","clearInterval","window","modalOff","checkAnswer","isCorrect","nextQuestion","length","color","description","xs","sm","md","answer","map","answers","id","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\n// import { List, Button, Card, Icon } from \"semantic-ui-react\";\r\nimport { Box, Grid, Button, Dialog, DialogTitle,\r\n   DialogContent, DialogContentText, DialogActions } from \"@mui/material/\";\r\n\r\nimport \"./question.css\";\r\n\r\n\r\nfunction Question() {\r\n  const QUESTION_API = gql`\r\n    {\r\n      questions {\r\n        id\r\n        description\r\n        answer {\r\n          id\r\n          option\r\n          isCorrect\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  // Run and fetch the data on the query\r\n  const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showAnswer, setshowAnswer] = useState(false);\r\n  const [final, setFinal] = useState(true);\r\n  const [answerCorrect, setAnswerCorrect] = useState(null);\r\n\r\n  const [seconds, setSeconds] = useState(15);\r\n  const [isRunning, setisRunning] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    if(isRunning){\r\n      const time = setInterval(() => {\r\n        setSeconds(seconds => seconds - 1);\r\n        console.log(currentQuestion);\r\n        if (seconds === 0 && seconds >= -1) {\r\n          console.log(\"Times Up!\");\r\n          if (currentQuestion >= 4) {\r\n            setFinal(true);\r\n            setisRunning(false);\r\n            clearInterval(time);\r\n          } else {\r\n            setCurrentQuestion(currentQuestion => currentQuestion + 1);\r\n            setSeconds(15);\r\n          }\r\n        }\r\n      }, 1000);\r\n      return () => window.clearInterval(time);\r\n    }\r\n  });\r\n\r\n  const modalOff = () => {\r\n    setFinal(false)\r\n  }\r\n  const checkAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setAnswerCorrect(true);\r\n      setScore(score + 100);\r\n    } else {\r\n      setAnswerCorrect(false);\r\n    }\r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < Quest.length) {\r\n      setSeconds(15);\r\n      setCurrentQuestion(nextQuestion);\r\n      setshowAnswer(true);\r\n    } else {\r\n      console.log(score);\r\n      setFinal(true);\r\n      setisRunning(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <h2>fetching data!</h2>\r\n      ) : (\r\n        <Box\r\n        className={\"bg\"}\r\n          maxWidth={\"60%\"}\r\n          marginLeft={\"20%\"}\r\n          marginTop={\"15%\"}\r\n          minHeight={\"50vh\"}\r\n          display={\"flex\"}\r\n          flexDirection={\"column\"}\r\n          justifyContent={\"center\"}\r\n        >\r\n          {final ? (\r\n            <Dialog open={final} onClose={modalOff}>\r\n              <DialogTitle>\r\n                {\"Congratulations!\"}\r\n              </DialogTitle>\r\n              <DialogContent>\r\n\r\n              </DialogContent>\r\n            </Dialog>\r\n          ) : (\r\n            <>\r\n            { seconds }\r\n            {showAnswer ? <h4 style={answerCorrect ? {color: 'green'} : {color: 'red'}}>{answerCorrect ? \"Correct!\" : \"Wrong!\"}</h4> : <></>}\r\n            <h2>{currentQuestion + 1} / <b>{Quest.length}</b></h2>\r\n            <h1>{Quest[currentQuestion].description}</h1>\r\n            <Grid\r\n              container\r\n              rowSpacing={1}\r\n              columnSpacing={{ xs: 1, sm: 6, md: 3 }}\r\n            >\r\n              {Quest[currentQuestion].answer.map((answers) => {\r\n                return (\r\n                  <Grid item xs={6}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className=\"answerButton\"\r\n                      value={answers.id}\r\n                      onClick={() => checkAnswer(answers.isCorrect)}\r\n                      key={answers.id}\r\n                      maxWidth={\"100%\"}\r\n                    >\r\n                      {answers.option}\r\n                    </Button>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n            </>\r\n            \r\n          )}\r\n          \r\n          </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}