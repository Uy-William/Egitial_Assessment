{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport AuthContext from \"../auth/AuthProvider\";\nimport { useLocation } from \"react-router-dom\";\nimport { Button, Dialog, DialogTitle, DialogContent, DialogActions } from \"@mui/material/\";\nimport \"./question.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ADD_SOCRE = gql`\n  mutation enterAnswer($earningpoints: String!, $userid: String!){\n    enterAnswer(earningpoints: $earningpoints, userid: $userid){\n      earningpoints\n    }\n  }\n`;\n\nfunction Question() {\n  _s();\n\n  const location = useLocation();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showAnswer, setshowAnswer] = useState(false);\n  const [final, setFinal] = useState(false);\n  const [answerCorrect, setAnswerCorrect] = useState(null);\n  const [userData, setUserData] = useState(\"\");\n  const [seconds, setSeconds] = useState(15);\n  const [isRunning, setisRunning] = useState(true);\n  const {\n    setAuth\n  } = useContext(AuthContext);\n  const QUESTION_API = gql`\n    {\n      questions {\n        id\n        description\n        answer {\n          id\n          option\n          isCorrect\n        }\n      }\n    }\n  `; // Run and fetch the data on the query\n\n  const {\n    loading,\n    data: {\n      questions: Quest\n    } = {}\n  } = useQuery(QUESTION_API);\n  const ADD_SCORE = gql`\n  mutation enterAnswer($earningpoints: String!, $userid: ID) {\n    enterAnswer(earningpoints: $earningpoints, userid: $userid) {\n      earningpoints\n    }\n  }\n`;\n  const [addAnswer, {\n    load\n  }] = useMutation(ADD_SOCRE, {\n    update(proxy, result) {\n      console.log(result);\n    },\n\n    variables: {\n      earningpoints: \"100\",\n      userid: userData\n    }\n  });\n  useEffect(() => {\n    if (isRunning) {\n      const time = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n\n        if (seconds === 0 && seconds >= -1) {\n          if (currentQuestion >= 4) {\n            setFinal(true);\n            setisRunning(false);\n            clearInterval(time);\n          } else {\n            setCurrentQuestion(currentQuestion => currentQuestion + 1);\n            setSeconds(15);\n          }\n        }\n      }, 1000);\n      return () => window.clearInterval(time);\n    }\n  }); // a function to close the modal\n  // const modalOff = () => {\n  //   setFinal(false)\n  // }\n\n  const checkAnswer = async isCorrect => {\n    if (isCorrect) {\n      setAnswerCorrect(true);\n      console.log(ADD_SCORE);\n      console.log(addAnswer.variables);\n      setUserData(location.state.userid);\n      addAnswer();\n      setScore(score + 100);\n    } else {\n      setAnswerCorrect(false);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < Quest.length) {\n      setSeconds(15);\n      setCurrentQuestion(nextQuestion);\n      setshowAnswer(true);\n    } else {\n      setFinal(true);\n      setisRunning(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"fetching data!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: final ? /*#__PURE__*/_jsxDEV(Dialog, {\n        open: final // onClose={modalOff} once clicks at the background outside the modal will close the modal\n        ,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Congratulations!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You have finished on taking the quiz, and your final score is.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"scoreStyle\",\n            children: [score, \" / 500\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Dialog, {\n          open: !final // onClose={modalOff} once clicks at the background outside the modal will close the modal\n          ,\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: [\"Question: \", currentQuestion + 1, \" / \", Quest.length, \" | \", seconds, \"s Left\", showAnswer ? /*#__PURE__*/_jsxDEV(\"p\", {\n              style: answerCorrect ? {\n                color: \"green\"\n              } : {\n                color: \"red\"\n              },\n              children: [\"| \", answerCorrect ? \"Correct!\" : \"Wrong!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: Quest[currentQuestion].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: Quest[currentQuestion].answer.map(answers => {\n              return /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                className: \"answerButton\",\n                value: answers.id,\n                onClick: () => checkAnswer(answers.isCorrect),\n                children: answers.option\n              }, answers.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 15\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"sXfqIsntsOi9gH75jNCWKZz0b80=\", false, function () {\n  return [useLocation, useQuery, useMutation];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useContext","useQuery","useMutation","gql","AuthContext","useLocation","Button","Dialog","DialogTitle","DialogContent","DialogActions","ADD_SOCRE","Question","location","currentQuestion","setCurrentQuestion","score","setScore","showAnswer","setshowAnswer","final","setFinal","answerCorrect","setAnswerCorrect","userData","setUserData","seconds","setSeconds","isRunning","setisRunning","setAuth","QUESTION_API","loading","data","questions","Quest","ADD_SCORE","addAnswer","load","update","proxy","result","console","log","variables","earningpoints","userid","time","setInterval","clearInterval","window","checkAnswer","isCorrect","state","nextQuestion","length","color","description","answer","map","answers","id","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport AuthContext from \"../auth/AuthProvider\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@mui/material/\";\r\n\r\nimport \"./question.css\";\r\n\r\nconst ADD_SOCRE = gql`\r\n  mutation enterAnswer($earningpoints: String!, $userid: String!){\r\n    enterAnswer(earningpoints: $earningpoints, userid: $userid){\r\n      earningpoints\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Question() {\r\n  const location = useLocation();\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showAnswer, setshowAnswer] = useState(false);\r\n  const [final, setFinal] = useState(false);\r\n  const [answerCorrect, setAnswerCorrect] = useState(null);\r\n\r\n  const [ userData, setUserData ] = useState(\"\");\r\n\r\n  const [seconds, setSeconds] = useState(15);\r\n  const [isRunning, setisRunning] = useState(true);\r\n\r\n  const { setAuth } = useContext(AuthContext);\r\n\r\n  const QUESTION_API = gql`\r\n    {\r\n      questions {\r\n        id\r\n        description\r\n        answer {\r\n          id\r\n          option\r\n          isCorrect\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  // Run and fetch the data on the query\r\n  const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n\r\n  const ADD_SCORE = gql`\r\n  mutation enterAnswer($earningpoints: String!, $userid: ID) {\r\n    enterAnswer(earningpoints: $earningpoints, userid: $userid) {\r\n      earningpoints\r\n    }\r\n  }\r\n`;\r\n\r\nconst [addAnswer, { load }] = useMutation(ADD_SOCRE, {\r\n  update(proxy, result){\r\n    console.log(result);\r\n  },\r\n  variables: {\r\n    earningpoints: \"100\",\r\n    userid: userData\r\n  }\r\n})\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      const time = setInterval(() => {\r\n        setSeconds((seconds) => seconds - 1);\r\n        if (seconds === 0 && seconds >= -1) {\r\n          if (currentQuestion >= 4) {\r\n            setFinal(true);\r\n            setisRunning(false);\r\n            clearInterval(time);\r\n          } else {\r\n            setCurrentQuestion((currentQuestion) => currentQuestion + 1);\r\n            setSeconds(15);\r\n          }\r\n        }\r\n      }, 1000);\r\n      return () => window.clearInterval(time);\r\n    }\r\n  });\r\n\r\n  // a function to close the modal\r\n  // const modalOff = () => {\r\n  //   setFinal(false)\r\n  // }\r\n\r\n  const checkAnswer = async (isCorrect) => {\r\n    if (isCorrect) {\r\n      setAnswerCorrect(true);\r\n      console.log(ADD_SCORE);\r\n      console.log(addAnswer.variables);\r\n      \r\n      setUserData(location.state.userid);\r\n      addAnswer();\r\n      setScore(score + 100);\r\n\r\n    } else {\r\n      setAnswerCorrect(false);\r\n    }\r\n    \r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < Quest.length) {\r\n      setSeconds(15);\r\n      setCurrentQuestion(nextQuestion);\r\n      setshowAnswer(true);\r\n    } else {\r\n      setFinal(true);\r\n      setisRunning(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <h2>fetching data!</h2>\r\n      ) : (\r\n        <div>\r\n          {final ? (\r\n            <Dialog \r\n            open={final} \r\n            // onClose={modalOff} once clicks at the background outside the modal will close the modal\r\n            >\r\n              <DialogTitle>{\"Congratulations!\"}</DialogTitle>\r\n              <DialogContent>\r\n                <p>\r\n                  You have finished on taking the quiz, and your final score is.\r\n                </p>\r\n                <h3 className=\"scoreStyle\">{score} / 500</h3>\r\n              </DialogContent>\r\n            </Dialog>\r\n          ) : (\r\n            <>\r\n              {/* {seconds} */}\r\n              \r\n              {/* <h2>\r\n                {currentQuestion + 1} / <b>{Quest.length}</b>\r\n              </h2>\r\n              <h1>{Quest[currentQuestion].description}</h1> */}\r\n              <Dialog \r\n            open={!final} \r\n            // onClose={modalOff} once clicks at the background outside the modal will close the modal\r\n            >\r\n              <DialogTitle>\r\n                Question: {currentQuestion + 1} / {Quest.length} | {seconds}s Left \r\n                {showAnswer ? (\r\n                <p\r\n                  style={answerCorrect ? { color: \"green\" } : { color: \"red\" }}\r\n                >\r\n                | {answerCorrect ? \"Correct!\" : \"Wrong!\"}\r\n                </p>\r\n              ) : (\r\n                <></>\r\n              )}\r\n                </DialogTitle>\r\n              <DialogContent>\r\n              {Quest[currentQuestion].description}\r\n              </DialogContent>\r\n              <DialogActions>\r\n              {Quest[currentQuestion].answer.map((answers) => {\r\n                  return (\r\n              <Button\r\n                        variant=\"contained\"\r\n                        className=\"answerButton\"\r\n                        value={answers.id}\r\n                        onClick={() => checkAnswer(answers.isCorrect)}\r\n                        key={answers.id}\r\n                      >\r\n                        {answers.option}\r\n                      </Button>\r\n                  )\r\n              })}\r\n              </DialogActions>\r\n            </Dialog>\r\n              {/* <Grid\r\n                container\r\n                rowSpacing={1}\r\n                columnSpacing={{ xs: 1, sm: 6, md: 3 }}\r\n              >\r\n                {Quest[currentQuestion].answer.map((answers) => {\r\n                  return (\r\n                    <Grid item xs={6}>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className=\"answerButton\"\r\n                        value={answers.id}\r\n                        onClick={() => checkAnswer(answers.isCorrect)}\r\n                        key={answers.id}\r\n                        maxWidth={\"100%\"}\r\n                      >\r\n                        {answers.option}\r\n                      </Button>\r\n                    </Grid>\r\n                  );\r\n                })}\r\n              </Grid> */}\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}