{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { List } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QUESTION_API = gql`\n  {\n    questions {\n        id\n      description\n      answer {\n          id\n        option\n        points\n      }\n    }\n  }\n`;\n\nfunction Question() {\n  _s();\n\n  const {\n    loading,\n    data: {\n      questions: Quest\n    } = {}\n  } = useQuery(QUESTION_API);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      bulleted: true,\n      children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Fetching data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this) : Quest && Quest.map(post => /*#__PURE__*/_jsxDEV(List.Item, {\n        children: [post.description, /*#__PURE__*/_jsxDEV(List.List, {\n          children: post.answer.map(answers => {\n            return /*#__PURE__*/_jsxDEV(List.Item, {\n              children: answers.option\n            }, answers.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"Uf85OiYYoY4rtPjEEyOsuEieXEI=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useRef","useContext","useQuery","gql","List","QUESTION_API","Question","loading","data","questions","Quest","map","post","description","answer","answers","option","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,QAAqB,mBAArB;;;AAEA,MAAMC,YAAY,GAAGF,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAaA,SAASG,QAAT,GAAoB;AAAA;;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,SAAS,EAAEC;AAAb,QAAuB;AAAxC,MAA+CR,QAAQ,CAACG,YAAD,CAA7D;AACA,sBACI;AAAA,2BACA,QAAC,IAAD;AAAM,MAAA,QAAQ,MAAd;AAAA,gBACCE,OAAO,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADM,GAGNG,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUC,IAAI,iBACrB,QAAC,IAAD,CAAM,IAAN;AAAA,mBACGA,IAAI,CAACC,WADR,eAEE,QAAC,IAAD,CAAM,IAAN;AAAA,oBACKD,IAAI,CAACE,MAAL,CAAYH,GAAZ,CAAgBI,OAAO,IAAI;AACxB,gCACA,QAAC,IAAD,CAAM,IAAN;AAAA,wBAA6BA,OAAO,CAACC;AAArC,eAAgBD,OAAO,CAACE,EAAxB;AAAA;AAAA;AAAA;AAAA,oBADA;AAGH,WAJA;AADL;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAgBL,IAAI,CAACK,EAArB;AAAA;AAAA;AAAA;AAAA,cADO;AAJX;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAuBD;;GAzBQX,Q;UAC8CJ,Q;;;KAD9CI,Q;AA2BT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { List } from \"semantic-ui-react\";\r\n\r\nconst QUESTION_API = gql`\r\n  {\r\n    questions {\r\n        id\r\n      description\r\n      answer {\r\n          id\r\n        option\r\n        points\r\n      }\r\n    }\r\n  }\r\n`;\r\nfunction Question() {\r\n  const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n  return (\r\n      <>\r\n      <List bulleted>\r\n      {loading ? (\r\n        <h1>Fetching data...</h1>\r\n      ) : (\r\n        Quest && Quest.map(post => (\r\n          <List.Item key={post.id}>\r\n            {post.description}\r\n            <List.List>\r\n                {post.answer.map(answers => {\r\n                    return (\r\n                    <List.Item key={answers.id}>{answers.option}</List.Item>\r\n                    )\r\n                })}\r\n              \r\n            </List.List>\r\n          </List.Item>\r\n        ))\r\n      )}\r\n    </List>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}