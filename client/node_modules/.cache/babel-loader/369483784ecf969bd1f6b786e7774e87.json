{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\"; // import { Card, List } from \"semantic-ui-react\";\n\nimport './question.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QUESTION_API = gql`\n  {\n    questions {\n      id\n      description\n      answer {\n        id\n        option\n        isCorrect\n      }\n    }\n  }\n`;\n\nfunction Question() {\n  _s();\n\n  const [allValues, setAllValues] = useState({\n    description: '',\n    option: '',\n    isCorrect: false,\n    questionId: '',\n    answerid: ''\n  });\n  const {\n    loading,\n    data\n  } = useQuery(QUESTION_API);\n  console.log(data.length); //   const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\n  //   const questItems =Quest && Quest.map((item) => {\n  //       return {\n  //       }\n  //   })\n  //   console.log(questItems);\n  //   console.log(Quest);\n  //   console.log(Quest);\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Question List:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"allValue.description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Question, \"xidy59VwGm54dOrE/4PVSFZPY/U=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useQuery","gql","QUESTION_API","Question","allValues","setAllValues","description","option","isCorrect","questionId","answerid","loading","data","console","log","length","currentQuestion","setCurrentQuestion"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CACA;;AAEA,OAAO,gBAAP;;;AAEA,MAAMC,YAAY,GAAGD,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAeA,SAASE,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA6BN,QAAQ,CAAC;AACxCO,IAAAA,WAAW,EAAE,EAD2B;AAExCC,IAAAA,MAAM,EAAE,EAFgC;AAGxCC,IAAAA,SAAS,EAAE,KAH6B;AAIxCC,IAAAA,UAAU,EAAE,EAJ4B;AAKxCC,IAAAA,QAAQ,EAAE;AAL8B,GAAD,CAA3C;AAQA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBZ,QAAQ,CAACE,YAAD,CAAlC;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,MAAjB,EAVgB,CAYpB;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACE,QAAM,CAAEC,eAAF,EAAmBC,kBAAnB,IAA0ClB,QAAQ,CAAC,CAAD,CAAxD;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAcD;;GAvCQI,Q;UASqBH,Q;;;KATrBG,Q;AAyCT,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\n// import { Card, List } from \"semantic-ui-react\";\r\n\r\nimport './question.css';\r\n\r\nconst QUESTION_API = gql`\r\n  {\r\n    questions {\r\n      id\r\n      description\r\n      answer {\r\n        id\r\n        option\r\n        isCorrect\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nfunction Question() {\r\n    const [ allValues, setAllValues] = useState({\r\n        description: '',\r\n        option: '',\r\n        isCorrect: false,\r\n        questionId: '',\r\n        answerid: ''\r\n    })\r\n\r\n    const { loading, data } = useQuery(QUESTION_API);\r\n    console.log(data.length);\r\n\r\n//   const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n\r\n//   const questItems =Quest && Quest.map((item) => {\r\n//       return {\r\n//       }\r\n//   })\r\n//   console.log(questItems);\r\n\r\n//   console.log(Quest);\r\n\r\n//   console.log(Quest);\r\n  const [ currentQuestion, setCurrentQuestion ] = useState(0);\r\n\r\n  return (\r\n    <>\r\n      <h1>Question List:</h1>\r\n      <h4>allValue.description</h4>\r\n      {/* {loading ? (\r\n          <h4>fetching data...</h4>\r\n      ): (\r\n          <ul>\r\n              Question List\r\n              <li>Items</li>\r\n          </ul>\r\n      )} */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}