{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { List } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUESTION_API = gql`\n    {\n        questions{\n            description\n            answer{\n              option\n              points\n            }\n          }\n    }\n`;\n\nfunction Question() {\n  _s();\n\n  const {\n    loading,\n    data: {\n      getPost: posts\n    }\n  } = useQuery(QUESTION_API);\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"fetching data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this) : posts && posts.map(post => {\n      /*#__PURE__*/\n      _jsxDEV(List.Item, {\n        children: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Question, \"76DgV3Vampe6jHXJaKB0Vzy61Tc=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useRef","useContext","useQuery","gql","List","QUESTION_API","Question","loading","data","getPost","posts","map","post"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,MAAMC,YAAY,GAAGF,GAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAWA,SAASG,QAAT,GAAoB;AAAA;;AAEhB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAO,EAAEC;AAAX;AAAjB,MAAwCR,QAAQ,CAACG,YAAD,CAAtD;AAEF,sBACE,QAAC,IAAD;AAAA,cAECE,OAAO,gBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADI,GAGJG,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI;AACvB;AAAA,cAAC,IAAD,CAAM,IAAN;AAAA,kBAAYA;AAAZ;AAAA;AAAA;AAAA;AAAA;AACH,KAFQ;AALb;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAhBQN,Q;UAEyCJ,Q;;;KAFzCI,Q;AAkBT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { List } from 'semantic-ui-react';\r\n\r\nconst QUESTION_API = gql `\r\n    {\r\n        questions{\r\n            description\r\n            answer{\r\n              option\r\n              points\r\n            }\r\n          }\r\n    }\r\n`;\r\nfunction Question() {\r\n\r\n    const { loading, data: { getPost: posts } } = useQuery(QUESTION_API);\r\n\r\n  return (\r\n    <List>\r\n\r\n    {loading ? (\r\n        <h1>fetching data...</h1>\r\n    ) : (\r\n        posts && posts.map(post => {\r\n            <List.Item>{post}</List.Item>\r\n        }) \r\n    )}\r\n  </List>\r\n  )\r\n}\r\n\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}