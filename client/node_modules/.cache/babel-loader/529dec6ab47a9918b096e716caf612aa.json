{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\signup\\\\signup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { useNavigate } from 'react-router-dom';\nimport { TextField, Button, Grid, Dialog, DialogTitle, DialogActions, DialogContent, DialogContentText } from \"@mui/material\";\nimport AuthContext from \"../auth/AuthProvider\";\nimport \"./signup.css\"; // Mutation/Update query for signing up the user to the database\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SIGNUP_USER = gql`\n  mutation signup($email: String!) {\n    signUp(email: $email) {\n      id\n      email\n    }\n  }\n`;\n\nfunction SignUp(_ref) {\n  _s();\n\n  let {\n    user\n  } = _ref;\n  // Navigate is used to redirect the page with data\n  const navigate = useNavigate();\n  const {\n    setAuth\n  } = useContext(AuthContext); // This state's default is (true) to defined to show the SignUp Form\n\n  const [showForm, setshowForm] = useState(true); // Tihs state defines the email that the user will input\n\n  const [useEmail, setEmail] = useState(\"\"); // This state is used to store the data that will be used to sent\n\n  const [userData, setUserData] = useState({}); // this feature will use the Mutation Query and run it\n\n  const [addUser, {\n    loading\n  }] = useMutation(SIGNUP_USER, {\n    // once success the result will be defined on setUserData\n    update(proxy, result) {\n      setUserData(result.data.signUp.id); // as the results are an array/json format this is being derived to get the data\n\n      console.log(userData);\n    },\n\n    variables: {\n      email: useEmail // get the user input email and run it on the mutation\n\n    }\n  }); // function that will do once submit\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    addUser(); // will call the addUser function\n\n    setshowForm(false); // will remove the signup/showform\n  }; // function that will navigate to the question page\n\n\n  const enterQuestion = async e => {\n    // redirect to url/question and also pass on the data\n    navigate('/question', {\n      state: {\n        userid: userData\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showForm ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SignUpDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"SignUpForm\",\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            type: \"email\",\n            id: \"standard-required\" // every change on textfield get and sets the value on the email State\n            ,\n            onChange: e => setEmail(e.target.value),\n            value: useEmail,\n            label: \"Email Address\",\n            variant: \"standard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"success\",\n            size: \"small\",\n            type: \"submit\",\n            children: \"Enter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // if the statement is false will show this content\n    _jsxDEV(Dialog, {\n      open: !showForm,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Ready to take the Quiz?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: [\"The Quiz contains \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"5 Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this), \"  with \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"4 options\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 58\n          }, this), \"  with \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"1 correct answer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 81\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), \"You will be given a \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"15 seconds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 35\n          }, this), \" to answer each question.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: enterQuestion,\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(SignUp, \"k7SKDkw73wCad3iM8aBOb/y74f4=\", false, function () {\n  return [useNavigate, useMutation];\n});\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/signup/signup.js"],"names":["React","useState","useContext","useMutation","gql","useNavigate","TextField","Button","Grid","Dialog","DialogTitle","DialogActions","DialogContent","DialogContentText","AuthContext","SIGNUP_USER","SignUp","user","navigate","setAuth","showForm","setshowForm","useEmail","setEmail","userData","setUserData","addUser","loading","update","proxy","result","data","signUp","id","console","log","variables","email","handleSubmit","e","preventDefault","enterQuestion","state","userid","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SACEC,SADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,MAJF,EAKEC,WALF,EAMEC,aANF,EAOEC,aAPF,EAQEC,iBARF,QASO,eATP;AAWA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAO,cAAP,C,CAEA;;;;AACA,MAAMC,WAAW,GAAGX,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,SAASY,MAAT,OAAwB;AAAA;;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AAEtB;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEA,QAAM;AAAEc,IAAAA;AAAF,MAAcjB,UAAU,CAACY,WAAD,CAA9B,CALsB,CAOtB;;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,IAAD,CAAxC,CARsB,CAUtB;;AACA,QAAM,CAACqB,QAAD,EAAWC,QAAX,IAAuBtB,QAAQ,CAAC,EAAD,CAArC,CAXsB,CAatB;;AACA,QAAM,CAAEuB,QAAF,EAAYC,WAAZ,IAA4BxB,QAAQ,CAAC,EAAD,CAA1C,CAdsB,CAgBtB;;AACA,QAAM,CAACyB,OAAD,EAAU;AAAEC,IAAAA;AAAF,GAAV,IAAyBxB,WAAW,CAACY,WAAD,EAAc;AACtD;AACAa,IAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACpBL,MAAAA,WAAW,CAACK,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,EAApB,CAAX,CADoB,CACgB;;AACpCC,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACD,KALqD;;AAMtDY,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAEf,QADE,CACQ;;AADR;AAN2C,GAAd,CAA1C,CAjBsB,CA4BtB;;AACA,QAAMgB,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACAd,IAAAA,OAAO,GAFyB,CAErB;;AACXL,IAAAA,WAAW,CAAC,KAAD,CAAX,CAHgC,CAGb;AACpB,GAJD,CA7BsB,CAmCtB;;;AACA,QAAMoB,aAAa,GAAG,MAAOF,CAAP,IAAa;AACjC;AACArB,IAAAA,QAAQ,CAAC,WAAD,EAAc;AAACwB,MAAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAEnB;AAAT;AAAR,KAAd,CAAR;AACD,GAHD;;AAKA,sBACE;AAAA,cAEGJ,QAAQ,gBACP;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BAEE;AAAM,QAAA,SAAS,EAAC,YAAhB;AAA6B,QAAA,QAAQ,EAAEkB,YAAvC;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAgB,UAAA,SAAS,EAAC,QAA1B;AAAmC,UAAA,cAAc,EAAC,eAAlD;AAAA,kCACE,QAAC,SAAD;AACE,YAAA,QAAQ,MADV;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,EAAE,EAAC,mBAHL,CAIE;AAJF;AAKE,YAAA,QAAQ,EAAGC,CAAD,IAAOhB,QAAQ,CAACgB,CAAC,CAACK,MAAF,CAASC,KAAV,CAL3B;AAME,YAAA,KAAK,EAAEvB,QANT;AAOE,YAAA,KAAK,EAAC,eAPR;AAQE,YAAA,OAAO,EAAC;AARV;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,MAAD;AACE,YAAA,OAAO,EAAC,WADV;AAEE,YAAA,KAAK,EAAC,SAFR;AAGE,YAAA,IAAI,EAAC,OAHP;AAIE,YAAA,IAAI,EAAC,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADO;AAAA;AA2BP;AACA,YAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,CAACF,QAAf;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAA,+BACE,QAAC,iBAAD;AAAA,wDACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADpB,0BAC6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAD7C,0BACoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADpE,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,uCAGsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eASE,QAAC,aAAD;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAEqB,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AA9BJ,mBADF;AA+CD;;GAxFQzB,M;UAGUX,W,EAccF,W;;;KAjBxBa,M;AA0FT,eAAeA,MAAf","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { useNavigate } from 'react-router-dom' ;\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n} from \"@mui/material\";\r\n\r\nimport AuthContext from \"../auth/AuthProvider\";\r\nimport \"./signup.css\";\r\n\r\n// Mutation/Update query for signing up the user to the database\r\nconst SIGNUP_USER = gql`\r\n  mutation signup($email: String!) {\r\n    signUp(email: $email) {\r\n      id\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nfunction SignUp({user}) {\r\n\r\n  // Navigate is used to redirect the page with data\r\n  const navigate = useNavigate();\r\n\r\n  const { setAuth } = useContext(AuthContext);\r\n\r\n  // This state's default is (true) to defined to show the SignUp Form\r\n  const [showForm, setshowForm] = useState(true);\r\n\r\n  // Tihs state defines the email that the user will input\r\n  const [useEmail, setEmail] = useState(\"\");\r\n\r\n  // This state is used to store the data that will be used to sent\r\n  const [ userData, setUserData ] = useState({});\r\n\r\n  // this feature will use the Mutation Query and run it\r\n  const [addUser, { loading }] = useMutation(SIGNUP_USER, {\r\n    // once success the result will be defined on setUserData\r\n    update(proxy, result) {\r\n      setUserData(result.data.signUp.id); // as the results are an array/json format this is being derived to get the data\r\n      console.log(userData);\r\n    },\r\n    variables: {\r\n      email: useEmail, // get the user input email and run it on the mutation\r\n    },\r\n  });\r\n\r\n  // function that will do once submit\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    addUser(); // will call the addUser function\r\n    setshowForm(false) // will remove the signup/showform\r\n  };\r\n\r\n  // function that will navigate to the question page\r\n  const enterQuestion = async (e) => {\r\n    // redirect to url/question and also pass on the data\r\n    navigate('/question', {state: {userid: userData } } )\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {/* if statement that checks the showForm state if its true will show the content */}\r\n      {showForm ? (\r\n        <div className=\"SignUpDiv\">\r\n          {/* once form is submit will forward to handleSubmit function */}\r\n          <form className=\"SignUpForm\" onSubmit={handleSubmit}>\r\n            <Grid container direction=\"column\" justifyContent=\"space-between\">\r\n              <TextField\r\n                required\r\n                type=\"email\"\r\n                id=\"standard-required\"\r\n                // every change on textfield get and sets the value on the email State\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                value={useEmail}\r\n                label=\"Email Address\"\r\n                variant=\"standard\"\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"success\"\r\n                size=\"small\"\r\n                type=\"submit\"\r\n              >\r\n                Enter\r\n              </Button>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      ) : (\r\n        // if the statement is false will show this content\r\n        <Dialog open={!showForm}>\r\n          <DialogTitle>Ready to take the Quiz?</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              The Quiz contains <b>5 Questions</b>  with <b>4 options</b>  with <b>1 correct answer</b>\r\n              <br />\r\n              You will be given a <b>15 seconds</b> to answer each question.\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={enterQuestion}>Enter</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n"]},"metadata":{},"sourceType":"module"}