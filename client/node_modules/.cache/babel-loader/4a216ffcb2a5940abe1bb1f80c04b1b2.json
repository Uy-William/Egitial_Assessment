{"ast":null,"code":"var _jsxFileName = \"D:\\\\Will\\\\Egitial_Assessment\\\\client\\\\src\\\\pages\\\\question\\\\question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { List, Button, Modal, Header, Icon } from \"semantic-ui-react\";\nimport \"./question.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  _s();\n\n  const QUESTION_API = gql`\n    {\n      questions {\n        id\n        description\n        answer {\n          id\n          option\n          isCorrect\n        }\n      }\n    }\n  `; // Run and fetch the data on the query\n\n  const {\n    loading,\n    data: {\n      questions: Quest\n    } = {}\n  } = useQuery(QUESTION_API);\n\n  if (Quest) {\n    console.log(Quest);\n  }\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showAnswer, setshowAnswer] = useState(false);\n  const [final, setFinal] = useState(false);\n  const [answerCorrect, setAnswerCorrect] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [seconds, setSeconds] = useState(15);\n  useEffect(() => {\n    const time = setInterval(() => {\n      // setSeconds(seconds - 1);\n      if (seconds === 0 && seconds !== -1) {\n        console.log(\"Times Up!\");\n\n        if (currentQuestion !== 4) {\n          setCurrentQuestion(currentQuestion + 1);\n          setSeconds(15);\n          console.log(currentQuestion);\n        } else {\n          clearInterval(time);\n          console.log(\"SHUP UP TIME!\");\n        }\n      }\n    }, 1000);\n\n    if (currentQuestion <= 5) {\n      return () => clearInterval(time);\n    } else {\n      clearInterval(time);\n    }\n  });\n\n  const checkAnswer = isCorrect => {\n    if (isCorrect) {\n      setAnswerCorrect(\"Right!\");\n      setScore(score + 100);\n    } else {\n      setAnswerCorrect(\"Wrong!\");\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < Quest.length) {\n      setSeconds(15);\n      setCurrentQuestion(nextQuestion);\n      setshowAnswer(true);\n    } else {\n      setFinal(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: final ? /*#__PURE__*/_jsxDEV(Modal, {\n      basic: true,\n      onClose: () => setOpen(false),\n      onOpen: () => setOpen(true),\n      open: open,\n      size: \"small\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        icon: true,\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          name: \"check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), \"100 / 500\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Oh shoot!, looks like you need to study more. come back again when you feel like it.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          basic: true,\n          color: \"red\",\n          inverted: true,\n          onClick: () => setOpen(false),\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), \" No\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"green\",\n          inverted: true,\n          onClick: () => setOpen(false),\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"checkmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), \" Yes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(List, {\n      bulleted: true,\n      children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Fetching data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [currentQuestion + 1, \" / \", Quest.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this), seconds, showAnswer ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: answerCorrect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 56\n        }, this), /*#__PURE__*/_jsxDEV(List.Item, {\n          children: [Quest[currentQuestion].description, /*#__PURE__*/_jsxDEV(List.List, {\n            children: Quest[currentQuestion].answer.map(answers => {\n              return /*#__PURE__*/_jsxDEV(Button, {\n                className: \"answerButton\",\n                value: answers.id,\n                onClick: () => checkAnswer(answers.isCorrect),\n                content: answers.option\n              }, answers.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)]\n        }, Quest.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this) //loading\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Question, \"q1VabCQ1c2KxfNJKMlxAl5iNh6Y=\", false, function () {\n  return [useQuery];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Will/Egitial_Assessment/client/src/pages/question/question.js"],"names":["React","useState","useEffect","useRef","useContext","useQuery","gql","List","Button","Modal","Header","Icon","Question","QUESTION_API","loading","data","questions","Quest","console","log","currentQuestion","setCurrentQuestion","score","setScore","showAnswer","setshowAnswer","final","setFinal","answerCorrect","setAnswerCorrect","open","setOpen","seconds","setSeconds","time","setInterval","clearInterval","checkAnswer","isCorrect","nextQuestion","length","description","answer","map","answers","id","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { List, Button, Modal, Header, Icon } from \"semantic-ui-react\";\r\n\r\nimport \"./question.css\";\r\n\r\nfunction Question() {\r\n  const QUESTION_API = gql`\r\n    {\r\n      questions {\r\n        id\r\n        description\r\n        answer {\r\n          id\r\n          option\r\n          isCorrect\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  // Run and fetch the data on the query\r\n  const { loading, data: { questions: Quest } = {} } = useQuery(QUESTION_API);\r\n\r\n  if (Quest) {\r\n    console.log(Quest);\r\n  }\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showAnswer, setshowAnswer] = useState(false);\r\n  const [final, setFinal] = useState(false);\r\n  const [answerCorrect, setAnswerCorrect] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [seconds, setSeconds] = useState(15);\r\n  useEffect(() => {\r\n    const time = setInterval(() => {\r\n      // setSeconds(seconds - 1);\r\n      if (seconds === 0 && seconds !== -1) {\r\n        console.log(\"Times Up!\");\r\n        if (currentQuestion !== 4) {\r\n          setCurrentQuestion(currentQuestion + 1);\r\n          setSeconds(15);\r\n          console.log(currentQuestion);\r\n        } else {\r\n          clearInterval(time);\r\n          console.log(\"SHUP UP TIME!\");\r\n        }\r\n      }\r\n    }, 1000);\r\n    if (currentQuestion <= 5) {\r\n      return () => clearInterval(time);\r\n    } else {\r\n      clearInterval(time);\r\n    }\r\n  });\r\n\r\n  const checkAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setAnswerCorrect(\"Right!\");\r\n      setScore(score + 100);\r\n    } else {\r\n      setAnswerCorrect(\"Wrong!\");\r\n    }\r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < Quest.length) {\r\n      setSeconds(15);\r\n      setCurrentQuestion(nextQuestion);\r\n      setshowAnswer(true);\r\n    } else {\r\n      setFinal(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {final ? (\r\n        <Modal\r\n          basic\r\n          onClose={() => setOpen(false)}\r\n          onOpen={() => setOpen(true)}\r\n          open={open}\r\n          size=\"small\"\r\n        >\r\n          <Header icon>\r\n            <Icon name=\"check\" />\r\n            100 / 500\r\n          </Header>\r\n          <Modal.Content>\r\n            <p>\r\n              Oh shoot!, looks like you need to study more. come back again when\r\n              you feel like it.\r\n            </p>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button basic color=\"red\" inverted onClick={() => setOpen(false)}>\r\n              <Icon name=\"remove\" /> No\r\n            </Button>\r\n            <Button color=\"green\" inverted onClick={() => setOpen(false)}>\r\n              <Icon name=\"checkmark\" /> Yes\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      ) : (\r\n        <List bulleted>\r\n          {loading ? (\r\n            <h1>Fetching data...</h1>\r\n          ) : (\r\n            <div>\r\n              <h1>\r\n                {currentQuestion + 1} / {Quest.length}\r\n              </h1>\r\n              {seconds}\r\n              {showAnswer ? <h4>{answerCorrect}</h4> : <h4></h4>}\r\n              <List.Item key={Quest.id}>\r\n                {Quest[currentQuestion].description}\r\n                <List.List>\r\n                  {Quest[currentQuestion].answer.map((answers) => {\r\n                    return (\r\n                      <Button\r\n                        className=\"answerButton\"\r\n                        value={answers.id}\r\n                        onClick={() => checkAnswer(answers.isCorrect)}\r\n                        content={answers.option}\r\n                        key={answers.id}\r\n                      />\r\n                    );\r\n                  })}\r\n                </List.List>\r\n              </List.Item>\r\n            </div>\r\n            //loading\r\n          )}\r\n        </List>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}